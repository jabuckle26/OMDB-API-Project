!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var o=function(e){this.html="<div class=film>\n                        <div class=visibleInfo>\n                            <img src="+e.Poster+">\n                            <h4>"+e.Title+"</h4>\n                        </div>\n                        <div class=hiddenInfo>\n                            \n                        </div>\n                    </div>"},r="james",c="",i=function(e){l();var t=document.getElementById("filmContainer");Array.from(e.Search).forEach((function(e){var n=new o(e);t.innerHTML+=n.html}))},l=function(){var e=document.querySelectorAll(".film");Array.from(e).forEach((function(e){e.remove()}))},u=function(){var e=document.getElementById("searchBox"),t=e.value;e.value="";var n=document.getElementById("filterYear");c=n.value,n.value="",r=t,f()},f=function(){console.log("J",c),console.log("J",r),""===c?fetch("http://www.omdbapi.com/?s="+r+"&apikey=70b6f337").then((function(e){return e.json()})).then((function(e){return i(e)})).catch((function(e){throw new Error(e)})):(console.log(c,"HERE"),fetch("http://www.omdbapi.com/?s="+r+"&y="+c+"&apikey=70b6f337").then((function(e){return e.json()})).then((function(e){return i(e)})).catch((function(e){throw new Error(e)})))};document.getElementById("searchButton").addEventListener("click",u),document.getElementById("searchBox").addEventListener("keyup",(function(e){"Enter"===e.code&&u()})),document.getElementById("filterButton").addEventListener("click",(function(){var e=document.getElementById("filterWindow");"flex"===e.style.display?(e.style.display="none",document.getElementById("filterButton").style.color="white"):(e.style.display="flex",document.getElementById("filterButton").style.color="black")})),f()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,